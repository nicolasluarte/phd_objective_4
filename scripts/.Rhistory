n_subjects       <- length(unique(cno_model_data$id))
n_subjects
n_trials_overall <- cno_model_data$n_trials_overall
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
n_actions
new_session_flag <- replace_na(session!=lag(session), 0)
new_session_flag <- replace_na(cno_model_data$session!=lag(cno_model_data$session), 0)
new_session_flag
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = as.numeric(session!=lag(sesion)))
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = as.numeric(session!=lag(session)))
cno_model_data
View(cno_model_data)
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = replace_na(as.numeric(session!=lag(session))), 0)
cno_model_data
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = replace_na(as.numeric(session!=lag(session))), 0)
cno_model_data
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = replace_na(as.numeric(session!=lag(session)), 0))
cno_model_data
n_trials_overall <- cno_model_data$n_trials_overall
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
new_session_flag <- cno_model_data$new_session_flag
# libs ----
pacman::p_load(
tidyverse,
ggplot2,
posterior,
bayesplot,
cmdstanr
)
setwd(this.path::here())
id               <- cno_model_data$id
n_trials_overall <- cno_model_data$n_trials_overall
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
new_session_flag <- cno_model_data$new_session_flag
id               <- cno_model_data$id
actions          <- cno_model_data$actions
rewards          <- cno_model_data$rewards
stan_data <- list(
n_trials_overall = n_trials_overall,
n_subjects       = n_subjects,
n_treatments     = n_treatments,
n_actions        = n_actions,
id               = id,
treatment        = treatment,
actions          = actions,
rewards          = rewards,
new_session_flag = new_session_flag
)
n_trials_overall <- cno_model_data$n_trials_overall
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
new_session_flag <- cno_model_data$new_session_flag
id               <- cno_model_data$id
treatment        <- cno_model_data$treatment
actions          <- cno_model_data$actions
rewards          <- cno_model_data$rewards
stan_data <- list(
n_trials_overall = n_trials_overall,
n_subjects       = n_subjects,
n_treatments     = n_treatments,
n_actions        = n_actions,
id               = id,
treatment        = treatment,
actions          = actions,
rewards          = rewards,
new_session_flag = new_session_flag
)
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
fit <- mod$sample(
data = stan_data,
seed = 42,
chains = 4,
parallel_chains = 12,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1500,
refresh = 200,
show_messages = TRUE,
adapt_delta = 0.85
)
fit <- mdl$sample(
data = stan_data,
seed = 42,
chains = 4,
parallel_chains = 12,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1500,
refresh = 200,
show_messages = TRUE,
adapt_delta = 0.85
)
# libs ----
pacman::p_load(
tidyverse,
ggplot2,
posterior,
bayesplot,
cmdstanr
)
setwd(this.path::here())
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = replace_na(as.numeric(session!=lag(session)), 0))
cno_model_data
# pass vars to stan model ----
n_trials_overall <- cno_model_data$n_trials_overall
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
new_session_flag <- cno_model_data$new_session_flag
id               <- cno_model_data$id
treatment        <- cno_model_data$treatment
actions          <- cno_model_data$actions
rewards          <- cno_model_data$rewards
stan_data <- list(
n_trials_overall = n_trials_overall,
n_subjects       = n_subjects,
n_treatments     = n_treatments,
n_actions        = n_actions,
id               = id,
treatment        = treatment,
actions          = actions,
rewards          = rewards,
new_session_flag = new_session_flag
)
# compile model ----
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
# run the model ----
fit <- mdl$sample(
data = stan_data,
seed = 42,
chains = 4,
parallel_chains = 12,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1500,
refresh = 200,
show_messages = TRUE,
adapt_delta = 0.85
)
n_trials_overall <- max(cno_model_data$n_trials_overall)
n_trials_overall
n_subjects
# libs ----
pacman::p_load(
tidyverse,
ggplot2,
posterior,
bayesplot,
cmdstanr
)
setwd(this.path::here())
# CNO model ----
cno_model_data <- read_csv("../datasets/individual_choice_data_complete_DREADDS.csv") %>%
mutate(
id = as.numeric(as.factor(ID)),
treatment = as.numeric(factor(as.factor(treatment), levels =
c(
"baseline",
"low_entropy_veh",
"mid_entropy_veh",
"high_entropy_veh",
"low_entropy_cno",
"mid_entropy_cno",
"high_entropy_cno"
))),
session = as.numeric(as.factor(n_sesion))
) %>%
select(id, session, treatment, actions, rewards) %>%
group_by(id, session) %>%
mutate(trial_n = row_number()) %>%
ungroup() %>%
group_by(id, session, trial_n) %>%
arrange(session, .by_group = TRUE) %>%
ungroup() %>%
mutate(n_trials_overall = row_number(),
new_session_flag = replace_na(as.numeric(session!=lag(session)), 0))
cno_model_data
# pass vars to stan model ----
n_trials_overall <- max(cno_model_data$n_trials_overall)
n_subjects       <- length(unique(cno_model_data$id))
n_treatments     <- length(unique(cno_model_data$treatment))
n_actions        <- length(unique(cno_model_data$actions))
new_session_flag <- cno_model_data$new_session_flag
id               <- cno_model_data$id
treatment        <- cno_model_data$treatment
actions          <- cno_model_data$actions
rewards          <- cno_model_data$rewards
stan_data <- list(
n_trials_overall = n_trials_overall,
n_subjects       = n_subjects,
n_treatments     = n_treatments,
n_actions        = n_actions,
id               = id,
treatment        = treatment,
actions          = actions,
rewards          = rewards,
new_session_flag = new_session_flag
)
# compile model ----
mdl <- cmdstan_model("../scripts/stan_DREADDS.stan",
cpp_options = list(stan_threads = TRUE))
# run the model ----
fit <- mdl$sample(
data = stan_data,
seed = 42,
chains = 4,
parallel_chains = 12,
threads_per_chain = 1,
iter_warmup = 1000,
iter_sampling = 1500,
refresh = 200,
show_messages = TRUE,
adapt_delta = 0.85
)
fit$summary()
fit_results <- fit$summary()
fit_results <- as_draws_df(fit$draws())
fit_results
fit_results <- as_draws_df(fit$draws())
ggtitle("Posteriors for Population Mean (transformed) and SD Parameters")
mcmc_hist(fit$draws(), pars = vars(starts_with("mu_"), starts_with("sigma_"))) +
ggtitle("Posteriors for Population Mean (transformed) and SD Parameters")
# Extract necessary draws
draws_df <- as_draws_df(fit$draws())
# Get draws of subject deviations and population parameters
subject_draws <- draws_df %>%
select(starts_with("z_tau"),
starts_with("mu_log_tau"),
starts_with("sigma_tau"))
# Create a map of subject index to a representative treatment index
# Here, we use the FIRST treatment observed for each subject.
# You might adapt this based on your analysis needs (e.g., most frequent treatment).
subject_treatment_map <- processed_df %>%
group_by(subject_idx) %>%
summarise(treatment_idx = first(treatment_idx), .groups = "drop") %>%
arrange(subject_idx) # Ensure it's sorted by subject_idx
processed_df <- raw_df %>%
# Ensure correct data types if loaded from CSV (example)
# mutate(id = as.character(id), # Or keep numeric if they are already clean integers
#        session = as.integer(session),
#        trial_in_session = as.integer(trial_in_session),
#        action_taken = as.integer(action_taken),
#        reward_received = as.integer(reward_received)) %>%
# Create consecutive 1-based integer indices for Stan
mutate(
# Subject index (1 to N_subjects)
subject_idx = as.integer(factor(id)),
# Treatment index (1 to N_treatments)
treatment_idx = as.integer(factor(treatment_name)),
# Action index (1 to N_actions) - ensure your raw data is coded appropriately
action_idx = as.integer(action_taken),
# Reward (ensure 0 or 1)
reward_val = as.integer(reward_received)
) %>%
# Ensure data is sorted correctly for session flag calculation
# *** This sorting is CRITICAL for the next step ***
arrange(subject_idx, session, trial_in_session) %>%
# Calculate the new session flag (1 if first trial in session for that subject, 0 otherwise)
group_by(subject_idx, session) %>%
mutate(new_session_flag = ifelse(row_number() == 1, 1, 0)) %>%
ungroup()
fit
as_tibble(fit)
# libs ----
pacman::p_load(
tidyverse,
ggplot2,
posterior,
bayesplot,
cmdstanr,
tidybayes
)
setwd(this.path::here())
cno_model_data
# 1. Get unique subject-treatment combinations observed (same as before)
subj_trt_combinations <- cno_model_data %>%
distinct(id, treatment) %>%
rename(subject = id, treatment = treatment) # Rename for clarity
subj_trt_combinations
draws_subj_sigma <- fit %>%
spread_draws(z_tau[subject], sigma_tau)
draws_subj_sigma
draws_trt <- fit %>%
spread_draws(mu_log_tau[treatment])
subject_treatment_tau_draws_tidy <- subj_trt_combinations %>%
# Join subject-level deviations (z_tau) and global SD (sigma_tau)
left_join(draws_subj_sigma, by = "subject") %>%
# Join treatment-level means (mu_log_tau)
left_join(draws_trt, by = c("treatment", ".chain", ".iteration", ".draw")) %>%
# Check for NAs which might indicate missing combinations or join issues
# filter(!is.na(mu_log_tau)) %>% # Optional check
# Calculate tau using the joined parameters
mutate(
log_tau = mu_log_tau + sigma_tau * z_tau,
tau = exp(log_tau)
) %>%
# Select relevant columns
select(subject, treatment, .draw, tau, z_tau, mu_log_tau, sigma_tau) # Keep intermediate if desired
subject_treatment_tau_draws_tidy
summary_tau_tidy <- subject_treatment_tau_draws_tidy %>%
group_by(subject, treatment) %>%
median_qi(tau, .width = c(0.8, 0.95)) # Calculate median and 80%/95% QI
summary_tau_tidy
f_d <- summary_tau_tidy %>%
mutate(
vir = if_else(subject %in% c(1,2,3), "trt", "ctrl"),
treatment = case_when(
treatment == 1 ~ "baseline",
treatment == 2 ~ "low_entropy_veh",
treatment == 3 ~ "mid_entropy_veh",
treatment == 4 ~ "high_entropy_veh",
treatment == 5 ~ "low_entropy_cno",
treatment == 6 ~ "mid_entropy_cno",
treatment == 7 ~"high_entropy_cno"
)
)
f_d
f_d %>%
ggplot(aes(
vir, tau
)) +
geom_point() +
facet_wrap(~treatment)
View(f_d)
f_d %>%
filter(.width = 0.95) %>%
ggplot(aes(
vir, tau
)) +
geom_pointrange(aes(ymin=.lower, ymax=.upper)) +
facet_wrap(~treatment)
f_d %>%
filter(.width == 0.95) %>%
ggplot(aes(
vir, tau
)) +
geom_pointrange(aes(ymin=.lower, ymax=.upper)) +
facet_wrap(~treatment)
f_d %>%
filter(.width == 0.95) %>%
ggplot(aes(
vir, tau
)) +
geom_point() +
facet_wrap(~treatment)
